diff --git a/include/linux/virtio_net.h b/include/linux/virtio_net.h
index 02a9f4d..4dfa9b6 100644
--- a/include/linux/virtio_net.h
+++ b/include/linux/virtio_net.h
@@ -103,10 +103,8 @@ static inline int virtio_net_hdr_to_skb(struct sk_buff *skb,
 
 		if (!skb_partial_csum_set(skb, start, off))
 			return -EINVAL;
-		if (skb_transport_offset(skb) < nh_min_len)
-			return -EINVAL;
 
-		nh_min_len = skb_transport_offset(skb);
+		nh_min_len = max_t(u32, nh_min_len, skb_transport_offset(skb));
 		p_off = nh_min_len + thlen;
 		if (!pskb_may_pull(skb, p_off))
 			return -EINVAL;
@@ -173,12 +171,6 @@ retry:
 			if (gso_type != SKB_GSO_UDP_L4)
 				return -EINVAL;
 			break;
-		case SKB_GSO_TCPV4:
-		case SKB_GSO_TCPV6:
-			if (skb->ip_summed == CHECKSUM_PARTIAL &&
-			    skb->csum_offset != offsetof(struct tcphdr, check))
-				return -EINVAL;
-			break;
 		}
 
 		/* Kernel has a special handling for GSO_BY_FRAGS. */
diff --git a/net/ipv4/udp_offload.c b/net/ipv4/udp_offload.c
index a727eea..e597189 100644
--- a/net/ipv4/udp_offload.c
+++ b/net/ipv4/udp_offload.c
@@ -278,11 +278,6 @@ struct sk_buff *__udp_gso_segment(struct sk_buff *gso_skb,
 	if (gso_skb->len <= sizeof(*uh) + mss)
 		return ERR_PTR(-EINVAL);
 
-	if (unlikely(skb_checksum_start(gso_skb) !=
-		     skb_transport_header(gso_skb) &&
-		     !(skb_shinfo(gso_skb)->gso_type & SKB_GSO_FRAGLIST)))
-		return ERR_PTR(-EINVAL);
-
 	if (skb_gso_ok(gso_skb, features | NETIF_F_GSO_ROBUST)) {
 		/* Packet is from an untrusted source, reset gso_segs. */
 		skb_shinfo(gso_skb)->gso_segs = DIV_ROUND_UP(gso_skb->len - sizeof(*uh),
@@ -290,26 +285,8 @@ struct sk_buff *__udp_gso_segment(struct sk_buff *gso_skb,
 		return NULL;
 	}
 
-	if (skb_shinfo(gso_skb)->gso_type & SKB_GSO_FRAGLIST) {
-		 /* Detect modified geometry and pass those to skb_segment. */
-		if (skb_pagelen(gso_skb) - sizeof(*uh) == skb_shinfo(gso_skb)->gso_size)
-			return __udp_gso_segment_list(gso_skb, features, is_ipv6);
-
-		 /* Setup csum, as fraglist skips this in udp4_gro_receive. */
-		gso_skb->csum_start = skb_transport_header(gso_skb) - gso_skb->head;
-		gso_skb->csum_offset = offsetof(struct udphdr, check);
-		gso_skb->ip_summed = CHECKSUM_PARTIAL;
-
-		uh = udp_hdr(gso_skb);
-		if (is_ipv6)
-			uh->check = ~udp_v6_check(gso_skb->len,
-						  &ipv6_hdr(gso_skb)->saddr,
-						  &ipv6_hdr(gso_skb)->daddr, 0);
-		else
-			uh->check = ~udp_v4_check(gso_skb->len,
-						  ip_hdr(gso_skb)->saddr,
-						  ip_hdr(gso_skb)->daddr, 0);
-	}
+	if (skb_shinfo(gso_skb)->gso_type & SKB_GSO_FRAGLIST)
+		return __udp_gso_segment_list(gso_skb, features, is_ipv6);
 
 	skb_pull(gso_skb, sizeof(*uh));
 